name: Patch Mikrotik RouterOS 6.49.17

on:
  workflow_dispatch:
    inputs:
      channel:
        description: 'Channel (stable, long-term)'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - long-term
      version:
        description: "Version"
        required: false
        default: '6.49.17'
        type: string
      buildtime:
        description: "Build Time"
        required: false
        default: ''
        type: string

permissions:
  contents: write

env:
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  CUSTOM_CLOUD_PUBLIC_KEY: ${{ secrets.CUSTOM_CLOUD_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  MIKRO_NPK_SIGN_PUBLIC_KEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_KEY }}
  MIKRO_CLOUD_PUBLIC_KEY: ${{ secrets.MIKRO_CLOUD_PUBLIC_KEY }}
  MIKRO_LICENCE_URL: ${{ secrets.MIKRO_LICENCE_URL }}
  CUSTOM_LICENCE_URL: ${{ secrets.CUSTOM_LICENCE_URL }}
  MIKRO_UPGRADE_URL: 'download.mikrotik.com'
  CUSTOM_UPGRADE_URL: ${{ secrets.CUSTOM_UPGRADE_URL }}
  MIKRO_RENEW_URL: ${{ secrets.MIKRO_RENEW_URL }}
  CUSTOM_RENEW_URL: ${{ secrets.CUSTOM_RENEW_URL }}
  MIKRO_CLOUD_URL: ${{ secrets.MIKRO_CLOUD_URL }}
  CUSTOM_CLOUD_URL: ${{ secrets.CUSTOM_CLOUD_URL }}

jobs:
  Set_BuildTime:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_buildtime.outputs.BUILD_TIME }}
    steps:
      - name: Set build time
        id: set_buildtime
        run: |
          _BUILD_TIME=${{ github.event.inputs.buildtime }}
          if [ -z "$_BUILD_TIME" ]; then
            echo "BUILD_TIME=$(date +'%s')" >> $GITHUB_OUTPUT
          else
             echo "BUILD_TIME=$_BUILD_TIME" >> $GITHUB_OUTPUT
          fi
          
  Patch_RouterOS:
    needs: Set_BuildTime
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        channel: ${{ fromJSON(format('["{0}"]', github.event.inputs.channel || 'stable')) }}
    env:
      TZ: 'Asia/Shanghai'
      LATEST_VERSION: "6.49.17"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Get RouterOS 6.49.17 files
      id: get_files
      run: |
        echo "Using fixed version: 6.49.17"
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        BUILD_TIME=${{ needs.Set_BuildTime.outputs.BUILD_TIME }}
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        
        # Download required files
        wget -nv -O mikrotik.iso https://download.mikrotik.com/routeros/6.49.17/mikrotik-6.49.17.iso
        wget -nv -O system-6.49.17.npk https://download.mikrotik.com/routeros/6.49.17/system-6.49.17.npk
        wget -nv -O routeros-x86-6.49.17.npk https://download.mikrotik.com/routeros/6.49.17/routeros-x86-6.49.17.npk
        wget -nv -O CHANGELOG https://download.mikrotik.com/routeros/6.49.17/CHANGELOG
        
        echo "has_patched_npk=false" >> $GITHUB_OUTPUT

    - name: Patch mikrotik-6.49.17.iso
      run: |
        sudo apt-get install -y mkisofs xorriso > /dev/null
        sudo mkdir ./iso 
        sudo mount -o loop,ro mikrotik.iso ./iso
        sudo mkdir ./new_iso
        sudo cp -r ./iso/* ./new_iso/
        sudo rsync -a ./iso/ ./new_iso/
        sudo umount ./iso
        sudo rm -rf ./iso
        
        sudo -E python3 patch.py npk system-6.49.17.npk
        sudo -E python3 patch.py kernel ./new_iso/isolinux/initrd.rgz
        
        NPK_FILES=$(find ./new_iso/*.npk)
        for file in $NPK_FILES; do
            sudo -E python3 npk.py sign $file $file
        done
        
        sudo cp system-6.49.17.npk ./new_iso/
        sudo mkisofs -o mikrotik-6.49.17.iso \
                    -V "MikroTik 6.49.17" \
                    -sysid "" -preparer "MiKroTiK" \
                    -publisher "" -A "MiKroTiK RouterOS" \
                    -input-charset utf-8 \
                    -b isolinux/isolinux.bin \
                    -c isolinux/boot.cat \
                    -no-emul-boot \
                    -boot-load-size 4 \
                    -boot-info-table \
                    -R -J \
                    ./new_iso
   
        sudo mkdir ./all_packages
        sudo cp ./new_iso/*.npk ./all_packages/
        sudo rm -rf ./new_iso

    - name: Create CHR image
      run: |
        sudo modprobe nbd
        sudo apt-get update
        sudo apt-get install -y qemu-utils extlinux > /dev/null
        
        # Download and prepare CHR image
        wget -nv -O chr.img.zip https://download.mikrotik.com/routeros/6.49.17/chr-6.49.17.img.zip
        unzip chr.img.zip
        mv chr-6.49.17.img chr.img
        
        # Patch CHR image
        sudo mkdir ./chr
        sudo cp chr.img chr-6.49.17.img
        sudo qemu-nbd -c /dev/nbd0 -f raw chr-6.49.17.img
        sudo -E python3 patch.py block /dev/nbd0p1 boot/initrd.rgz
        sudo mount /dev/nbd0p1 ./chr
        sudo cp ./all_packages/routeros-x86-6.49.17.npk ./chr/var/pdb/routeros-x86/image
        sudo umount ./chr
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf ./chr
        
        # Create multiple image formats
        sudo qemu-img convert -f raw -O qcow2 chr-6.49.17.img chr-6.49.17.qcow2
        sudo qemu-img convert -f raw -O vmdk chr-6.49.17.img chr-6.49.17.vmdk
        sudo qemu-img convert -f raw -O vpc chr-6.49.17.img chr-6.49.17.vhd
        sudo qemu-img convert -f raw -O vhdx chr-6.49.17.img chr-6.49.17.vhdx
        sudo qemu-img convert -f raw -O vdi chr-6.49.17.img chr-6.49.17.vdi

        # Create zip files
        sudo zip chr-6.49.17.qcow2.zip chr-6.49.17.qcow2
        sudo zip chr-6.49.17.vmdk.zip chr-6.49.17.vmdk
        sudo zip chr-6.49.17.vhd.zip chr-6.49.17.vhd
        sudo zip chr-6.49.17.vhdx.zip chr-6.49.17.vhdx
        sudo zip chr-6.49.17.vdi.zip chr-6.49.17.vdi
        sudo zip chr-6.49.17.img.zip chr-6.49.17.img

        # Clean up
        sudo rm chr-6.49.17.qcow2
        sudo rm chr-6.49.17.vmdk
        sudo rm chr-6.49.17.vhd
        sudo rm chr-6.49.17.vhdx
        sudo rm chr-6.49.17.vdi
        sudo rm chr-6.49.17.img

        # Package all NPK files
        cd ./all_packages
        sudo zip ../all_packages-x86-6.49.17.zip *.npk
        cd ..
        
    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS 6.49.17"
        body_path: "CHANGELOG"
        tag_name: "6.49.17"
        files: |
          mikrotik-6.49.17.iso
          chr-6.49.17*.zip
          all_packages-x86-6.49.17.zip
